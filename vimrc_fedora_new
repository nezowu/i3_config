" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2019 Dec 17
"
" To use it, copy it to
"	       for Unix:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"	 for MS-Windows:  $VIM\_vimrc
"	      for Haiku:  ~/config/settings/vim/vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

"au FileType c,cpp setl com-=://
au FileType go setl com-=://
au FileType c,cpp,rust setl ts=4 sw=4 et com-=://
au FileType sh setl com-=:#
au FileType haskell setl ts=2 sw=2 et com-=:--
set laststatus=2
set statusline=%f%m%r%h%w\ %y\ enc:%{&enc}\ ff:%{&ff}\ fenc:%{&fenc}%=(ch:%3b\ hex:%2B)\ col:%2c\ line:%2l/%L\ [%2p%%] 
"hi StatusLine cterm=none ctermbg=darkgrey ctermfg=black
hi StatusLine cterm=none ctermbg=black ctermfg=darkgrey
set number
set showtabline=2
" hi TabLineFill ctermfg=lightgrey ctermbg=darkgrey
hi TabLineSel ctermfg=white ctermbg=black
hi TabLine cterm=none ctermfg=darkgrey ctermbg=black
hi TabLineFill ctermfg=black
hi LineNr ctermfg=darkgray

augroup templates
  au! 
  autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
augroup END

"move tab left and right
" run tab left and right
nnoremap <S-Left> :-tabm<CR>
nnoremap <S-Right> :+tabm<CR>
nnoremap <S-h> gT
nnoremap <S-l> gt

""au FileType rust,m4 inoremap ' '
""inoremap ' ''<Left>
""inoremap " ""<Left>
"autocmd FileType rust,go inoremap < <><Left>
"inoremap [ []<Left>
"inoremap { {}<Left>
inoremap {<CR> {<CR>}<Esc>O
""inoremap ( ()<Left>
""inoremap () ()
"inoremap (<CR> () {<CR>}<Esc>O

"nnoremap H gT
"nnoremap L gt

"au BufWrite *.zig set ft=zig
"au FileType sh inoremap ## <tab><tab>#<space>
"au FileType sh inoremap ## 80A<space>a#<space>
"au FileType sh inoremap ## <esc>80A<space><esc>d80\|a#<space>
au FileType sh inoremap ## <esc>80a<space><esc>d80<bar>a#<space>

nnoremap q :qa<CR>
